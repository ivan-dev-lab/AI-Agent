#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# TODO: —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
# QUESTION: —á—Ç–æ –∑–∞ —á–∞—Ç —Å —É—á–µ–Ω–∏–∫–æ–º?
# TODO: —Å–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–∫—É
# TODO: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ç–∞–π–º–∑–æ–Ω—É –≤—ã—Å—Ç–∞–≤–∏—Ç—å 

"""
–£—á–µ–±–Ω—ã–π Telegram-–±–æ—Ç –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è ESP32/MicroPython (aiogram 3)
–ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é, –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫, "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
–î–æ–±–∞–≤–ª–µ–Ω–æ:
- –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è (–∏–ª–∏ ¬´‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).
- "–ó–∞–ø–∏—Å–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å" —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ A‚Äì–Ø).
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ A‚Äì–Ø).
–°—Ç–µ–∫: aiogram (async), LangChain + Ollama, SQLite (aiosqlite), APScheduler.
"""

import asyncio
import os
import re
from io import BytesIO
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo
from typing import Dict, Any, List, Tuple

import dotenv
dotenv.load_dotenv(os.path.abspath('.env'))  # –≥—Ä—É–∑–∏–º .env –¥–æ —á—Ç–µ–Ω–∏—è os.getenv

import aiosqlite
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, BufferedInputFile, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.enums import ParseMode

# # ---- LangChain (ChatOllama) ----
# from langchain_core.output_parsers import StrOutputParser
# from langchain_core.prompts import ChatPromptTemplate
# from langchain_community.chat_models import ChatOllama

import pytz  # type: ignore

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
DEFAULT_MODEL = os.getenv("MODEL_NAME", "llama3:8b")
DB_PATH = os.getenv("DB_PATH", "agent.db")
DEFAULT_TZ = "UTC"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC

REMINDER_OFFSETS = [
    ("T-24h", timedelta(hours=24)),
    ("T-3h", timedelta(hours=3)),
    ("T-15m", timedelta(minutes=15)),
    ("T0", timedelta(seconds=0)),
]

default_props = DefaultBotProperties(parse_mode='HTML')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–¥–ª—è APScheduler)
BOT: Bot | None = None
SCHEDULER: AsyncIOScheduler | None = None

# –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_MODEL: Dict[int, str] = {}

# ---- –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π FSM (in-memory) ----
# USER_STATE[user_id] = {"mode": "...", "step": 0..n, "data": {...}, "chat_id": int}
USER_STATE: Dict[int, Dict[str, Any]] = {}

# ---------- PROMPTS ----------
SYSTEM_PROMPT = """\
You are an expert MicroPython tutor for ESP32-based educational robotics.
Your job: generate clean, safe, well-commented MicroPython code **first**, then include a short explanation at the end.
Constraints and style:
- Target platform: ESP32 with MicroPython standard modules only (machine, time, PWM etc.). Avoid uasyncio unless explicitly requested.
- No external libraries. No network unless explicitly requested.
- Always declare GPIO pins as named constants at the top (e.g., LED_PIN = 2).
- Use clear function structure, docstrings, and step-by-step comments for students.
- Add a short "Test Instructions" section as comments.
- If hardware is ambiguous, make safe assumptions and clearly list them in comments.
Return code enclosed in Markdown triple backticks with language 'python', then the explanation.
"""

# PROMPT = ChatPromptTemplate.from_messages([
#     ("system", SYSTEM_PROMPT),
#     ("human",
#      "Generate MicroPython code for ESP32 according to this description:\n"
#      "=== DESCRIPTION START ===\n{task_description}\n=== DESCRIPTION END ===\n\n"
#      "Make the code beginner-friendly with comments; then add a short explanation.")
# ])
# parser = StrOutputParser()


# def build_llm(model_name: str) -> ChatOllama:
#     return ChatOllama(model=model_name, temperature=0.2)


# -------------------- –ë–ê–ó–ê –î–ê–ù–ù–´–• --------------------

async def fetchone(db, sql: str, params=()):
    cur = await db.execute(sql, params)
    row = await cur.fetchone()
    await cur.close()
    return row

async def fetchall(db, sql: str, params=()):
    cur = await db.execute(sql, params)
    rows = await cur.fetchall()
    await cur.close()
    return rows


async def ensure_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.executescript("""
        PRAGMA journal_mode=WAL;
        CREATE TABLE IF NOT EXISTS classes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            owner_chat_id INTEGER NOT NULL,
            timezone TEXT NOT NULL
        );
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            username TEXT,
            chat_id INTEGER
        );
        CREATE TABLE IF NOT EXISTS enrollments (
            student_id INTEGER NOT NULL,
            class_id INTEGER NOT NULL,
            UNIQUE (student_id, class_id),
            FOREIGN KEY(student_id) REFERENCES students(id) ON DELETE CASCADE,
            FOREIGN KEY(class_id) REFERENCES classes(id) ON DELETE CASCADE
        );
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            class_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT,
            due_utc TEXT NOT NULL,
            created_utc TEXT NOT NULL,
            FOREIGN KEY(class_id) REFERENCES classes(id) ON DELETE CASCADE
        );
        CREATE TABLE IF NOT EXISTS jobs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            task_id INTEGER NOT NULL,
            run_at_utc TEXT NOT NULL,
            kind TEXT NOT NULL,
            UNIQUE(task_id, run_at_utc, kind),
            FOREIGN KEY(task_id) REFERENCES tasks(id) ON DELETE CASCADE
        );
        """)
        await db.commit()


# -------------------- –£–¢–ò–õ–ò–¢–´ --------------------

def fmt_dt_local(dt_utc: datetime, tz: ZoneInfo) -> str:
    return dt_utc.astimezone(tz).strftime("%Y-%m-%d %H:%M")

def extract_code_from_markdown(md: str) -> str:
    fence = re.compile(r"```(?:python)?\s*(.*?)```", re.DOTALL | re.IGNORECASE)
    m = fence.search(md)
    return m.group(1).strip() if m else md.strip()

def display_student(name: str, username: str | None) -> str:
    return f"{name} (@{username})" if username else f"{name} (‚Äî)"

# -------------------- –ö–ù–û–ü–ö–ò/–ú–ï–ù–Æ --------------------

# callback data (–ø—Ä–æ—Å—Ç—ã–µ –∏ –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ)
CB_MAIN = "main"
CB_ADD_CLASS = "add_class"
CB_ADD_STUDENT = "add_student"
CB_ENROLL = "enroll"
CB_REGISTER = "register"
CB_ADD_TASK = "add_task"
CB_LIST_TASKS = "list_tasks"
CB_GEN = "gen"
CB_SETTINGS = "settings"
CB_BACK = "back_to_main"

# –ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
CB_ENROLL_PICK_STU = "enroll_pick_stu:"       # +<student_id>
CB_ENROLL_PICK_CLS = "enroll_pick_cls:"       # +<student_id>:<class_id>

# –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞—á–∏—Å–ª–∏—Ç—å –≤ –∫–ª–∞—Å—Å/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
CB_STU_AFTER_ADD_ENROLL = "stu_after_add_enroll:"  # +<student_id>
CB_STU_AFTER_ADD_SKIP = "stu_after_add_skip"

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
CB_ADD_TASK_PICK_CLASS = "addtask_pick_cls:"  # +<class_id>

def back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_BACK)]
    ])

def single_col_kb(rows: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """rows: [(text, callback_data)] => –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥."""
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=t, callback_data=cb)] for t, cb in rows])

def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=CB_ADD_TASK)],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data=CB_LIST_TASKS)],
        [InlineKeyboardButton(text="üè∑ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å", callback_data=CB_ADD_CLASS)],
        [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data=CB_ADD_STUDENT)],
        [InlineKeyboardButton(text="üîó –ó–∞–ø–∏—Å–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å", callback_data=CB_ENROLL)],
        [InlineKeyboardButton(text="üí¨ –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç —É—á–µ–Ω–∏–∫–∞", callback_data=CB_REGISTER)],
        [InlineKeyboardButton(text="ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ (–æ–ø–∏—Å–∞–Ω–∏–µ–º)", callback_data=CB_GEN)],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=CB_SETTINGS)],
    ])

async def show_main_menu(target):
    text = (
        "üèÅ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç <i>–ø–æ—Å–ª–µ</i> –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.\n"
        "–¢–∞–π–º–∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>UTC</b>.\n"
    )
    if isinstance(target, Message):
        await target.answer(text, reply_markup=main_menu_kb())
    else:
        await target.message.edit_text(text, reply_markup=main_menu_kb())


# -------------------- APSCHEDULER --------------------
async def schedule_task_jobs(task_id: int):
    if SCHEDULER is None:
        return
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        task = await fetchone(db, "SELECT * FROM tasks WHERE id = ?", (task_id,))
        if not task:
            return
        class_row = await fetchone(db, "SELECT * FROM classes WHERE id = ?", (task["class_id"],))
        if not class_row:
            return

        due_utc = datetime.fromisoformat(task["due_utc"]).replace(tzinfo=timezone.utc)
        for label, delta in REMINDER_OFFSETS:
            run_at_utc = due_utc - delta
            if run_at_utc <= datetime.now(timezone.utc):
                continue

            exists = await fetchone(
                db, "SELECT 1 FROM jobs WHERE task_id=? AND run_at_utc=? AND kind=?",
                (task_id, run_at_utc.isoformat(), label)
            )
            if exists:
                continue

            await db.execute(
                "INSERT OR IGNORE INTO jobs(task_id, run_at_utc, kind) VALUES (?, ?, ?)",
                (task_id, run_at_utc.isoformat(), label)
            )
            await db.commit()

            SCHEDULER.add_job(
                send_reminder_job,
                "date",
                run_date=run_at_utc,
                args=[task_id, label],
                id=f"task{task_id}_{label}_{int(run_at_utc.timestamp())}",
                misfire_grace_time=60
            )

async def rehydrate_jobs():
    if SCHEDULER is None:
        return
    now_iso = datetime.now(timezone.utc).isoformat()
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        rows = await fetchall(db, "SELECT task_id, run_at_utc, kind FROM jobs WHERE run_at_utc > ?", (now_iso,))
    for r in rows:
        run_at_utc = datetime.fromisoformat(r["run_at_utc"]).replace(tzinfo=timezone.utc)
        SCHEDULER.add_job(
            send_reminder_job,
            "date",
            run_date=run_at_utc,
            args=[r["task_id"], r["kind"]],
            id=f"rehydrated_task{r['task_id']}_{r['kind']}_{int(run_at_utc.timestamp())}",
            misfire_grace_time=60
        )

async def send_reminder_job(task_id: int, when_label: str):
    if BOT is None:
        return
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        task = await fetchone(db, "SELECT * FROM tasks WHERE id = ?", (task_id,))
        if not task:
            return
        class_row = await fetchone(db, "SELECT * FROM classes WHERE id = ?", (task["class_id"],))
        if not class_row:
            return

        tz = ZoneInfo(class_row["timezone"])
        due_utc = datetime.fromisoformat(task["due_utc"]).replace(tzinfo=timezone.utc)
        due_local_str = fmt_dt_local(due_utc, tz)
        teacher_chat = class_row["owner_chat_id"]

        students = await fetchall(
            db,
            """SELECT s.name, s.chat_id FROM students s
               JOIN enrollments e ON e.student_id = s.id
               WHERE e.class_id = ?""",
            (class_row["id"],)
        )

    header = (
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({when_label})\n"
        f"–ö–ª–∞—Å—Å: <b>{class_row['name']}</b>\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: <b>{task['title']}</b>\n"
        f"–î–µ–¥–ª–∞–π–Ω: <b>{due_local_str} {class_row['timezone']}</b>"
    )
    body = (
        f"\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description'] or '‚Äî'}\n"
        "\n–ß–µ–∫-–ª–∏—Å—Ç:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç–µ\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω—ã –ø–∏–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "‚Ä¢ –°–¥–∞–π—Ç–µ –æ—Ç—á—ë—Ç –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"
    )

    missing = []
    for s in students:
        if s["chat_id"]:
            try:
                await BOT.send_message(chat_id=int(s["chat_id"]), text=header + body, parse_mode=ParseMode.HTML)
            except Exception:
                missing.append(s["name"])
        else:
            missing.append(s["name"])

    final_body = body
    if missing:
        final_body += "\n\n‚ö†Ô∏è –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: " + ", ".join(missing)
    try:
        await BOT.send_message(chat_id=int(teacher_chat), text=header + final_body, parse_mode=ParseMode.HTML)
    except Exception:
        pass


# -------------------- –†–û–£–¢–ï–† –ò –•–ï–ù–î–õ–ï–†–´ --------------------
router = Router()

# ===== –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====
@router.message(Command("start"))
async def cmd_start(msg: Message):
    await show_main_menu(msg)

@router.message(Command("help"))
async def cmd_help(msg: Message):
    await show_main_menu(msg)

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–æ–±—â–∏–µ) =====
@router.callback_query(F.data == CB_BACK)
async def cb_back(cq: CallbackQuery):
    USER_STATE.pop(cq.from_user.id, None)
    await show_main_menu(cq)

@router.callback_query(F.data == CB_SETTINGS)
async def cb_settings(cq: CallbackQuery):
    USER_STATE.pop(cq.from_user.id, None)
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "‚Ä¢ –¢–∞–π–º–∑–æ–Ω–∞: –ø–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é <b>UTC</b>.\n"
        "‚Ä¢ –í –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Ç—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é IANA TZ.\n"
    )
    await cq.message.edit_text(text, reply_markup=back_kb())

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ =====
@router.callback_query(F.data == CB_ADD_CLASS)
async def cb_add_class(cq: CallbackQuery):
    USER_STATE[cq.from_user.id] = {"mode": "add_class", "step": 0, "data": {}, "chat_id": cq.message.chat.id}
    await cq.message.edit_text(
        "üè∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞</b>\n\n"
        "–®–∞–≥ 1/1: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞</b>.\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞-10–ê</code>\n", reply_markup=back_kb()
    )

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ (—Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—á–∏—Å–ª–∏—Ç—å) =====
@router.callback_query(F.data == CB_ADD_STUDENT)
async def cb_add_student(cq: CallbackQuery):
    USER_STATE[cq.from_user.id] = {"mode": "add_student", "step": 0, "data": {}, "chat_id": cq.message.chat.id}
    await cq.message.edit_text(
        "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
        "–®–∞–≥ 1/2: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∏–º—è —É—á–µ–Ω–∏–∫–∞</b>.\n", reply_markup=back_kb()
    )

# ===== –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å (—á–µ—Ä–µ–∑ —Å–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–æ–∫) =====
@router.callback_query(F.data == CB_ENROLL)
async def cb_enroll(cq: CallbackQuery):
    # –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (A‚Äì–Ø), 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        students = await fetchall(db, "SELECT id, name, username FROM students ORDER BY name COLLATE NOCASE ASC")
    if not students:
        return await cq.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.", reply_markup=back_kb())
    rows = [(display_student(s["name"], s["username"]), f"{CB_ENROLL_PICK_STU}{s['id']}") for s in students]
    await cq.message.edit_text("üîó <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞</b>:", reply_markup=single_col_kb(rows))

@router.callback_query(F.data.startswith(CB_ENROLL_PICK_STU))
async def cb_enroll_pick_student(cq: CallbackQuery):
    # –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
    try:
        student_id = int(cq.data.split(":")[1])
    except Exception:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    USER_STATE[cq.from_user.id] = {"mode": "enroll_flow", "data": {"student_id": student_id}, "chat_id": cq.message.chat.id}

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        s = await fetchone(db, "SELECT name, username FROM students WHERE id=?", (student_id,))
        classes = await fetchall(db, "SELECT id, name FROM classes ORDER BY name COLLATE NOCASE ASC")
    if not s:
        return await cq.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    if not classes:
        return await cq.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å.", reply_markup=back_kb())

    student_title = display_student(s["name"], s["username"])
    rows = [(f"{c['name']}", f"{CB_ENROLL_PICK_CLS}{student_id}:{c['id']}") for c in classes]
    # –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    rows.append(("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", CB_STU_AFTER_ADD_SKIP))
    await cq.message.edit_text(
        f"üîó –£—á–µ–Ω–∏–∫: <b>{student_title}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–ª–∞—Å—Å</b>:",
        reply_markup=single_col_kb(rows)
    )

@router.callback_query(F.data.startswith(CB_ENROLL_PICK_CLS))
async def cb_enroll_pick_class(cq: CallbackQuery):
    # enroll —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∫–ª–∞—Å—Å
    try:
        _, payload = cq.data.split(":", 1)
        student_id_str, class_id_str = payload.split(":")
        student_id = int(student_id_str)
        class_id = int(class_id_str)
    except Exception:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        s = await fetchone(db, "SELECT name, username FROM students WHERE id=?", (student_id,))
        c = await fetchone(db, "SELECT name FROM classes WHERE id=?", (class_id,))
        if not s or not c:
            return await cq.answer("–£—á–µ–Ω–∏–∫ –∏–ª–∏ –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        try:
            await db.execute("INSERT OR IGNORE INTO enrollments(student_id, class_id) VALUES(?, ?)", (student_id, class_id))
            await db.commit()
        except Exception as e:
            return await cq.message.edit_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=back_kb())

    USER_STATE.pop(cq.from_user.id, None)
    await cq.message.edit_text(
        f"‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n"
        f"–£—á–µ–Ω–∏–∫: <b>{display_student(s['name'], s['username'])}</b>\n"
        f"–ö–ª–∞—Å—Å: <b>{c['name']}</b>",
        reply_markup=back_kb()
    )

# ===== –ü—Ä–∏–≤—è–∑–∫–∞ —á–∞—Ç–∞ —É—á–µ–Ω–∏–∫–∞ =====
@router.callback_query(F.data == CB_REGISTER)
async def cb_register(cq: CallbackQuery):
    USER_STATE[cq.from_user.id] = {"mode": "register", "step": 0, "data": {}, "chat_id": cq.message.chat.id}
    await cq.message.edit_text(
        "üí¨ <b>–ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç —É—á–µ–Ω–∏–∫–∞</b>\n\n"
        "–®–∞–≥ 1/1: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∏–º—è —É—á–µ–Ω–∏–∫–∞</b> –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.\n", reply_markup=back_kb()
    )

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –∫–Ω–æ–ø–∫–∞–º–∏) =====
@router.callback_query(F.data == CB_ADD_TASK)
async def cb_add_task(cq: CallbackQuery):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        classes = await fetchall(db, "SELECT id, name FROM classes ORDER BY name COLLATE NOCASE ASC")
    if not classes:
        return await cq.message.edit_text(
            "üìù <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å (–º–µ–Ω—é ‚Üí ¬´üè∑ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å¬ª).",
            reply_markup=back_kb()
        )

    USER_STATE[cq.from_user.id] = {"mode": "add_task", "step": 0, "data": {}, "chat_id": cq.message.chat.id}
    rows = [(c["name"], f"{CB_ADD_TASK_PICK_CLASS}{c['id']}") for c in classes]
    await cq.message.edit_text(
        "üìù <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
        "–®–∞–≥ 1/4: –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–ª–∞—Å—Å</b>:",
        reply_markup=single_col_kb(rows)
    )

@router.callback_query(F.data.startswith(CB_ADD_TASK_PICK_CLASS))
async def cb_add_task_pick_class(cq: CallbackQuery):
    # –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å class_id –∏ —Å–ø—Ä–æ—Å–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
    try:
        class_id = int(cq.data.split(":", 1)[1])
    except Exception:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        class_row = await fetchone(db, "SELECT id, name, timezone FROM classes WHERE id=?", (class_id,))
    if not class_row:
        return await cq.answer("–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    USER_STATE[cq.from_user.id] = {
        "mode": "add_task",
        "step": 1,
        "data": {"class_id": class_row["id"], "class_name": class_row["name"]},
        "chat_id": cq.message.chat.id
    }
    await cq.message.edit_text(
        f"üìù <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n"
        f"–ö–ª–∞—Å—Å: <b>{class_row['name']}</b>\n\n"
        f"–®–∞–≥ 2/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>.",
        reply_markup=back_kb()
    )

# ===== –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π =====
@router.callback_query(F.data == CB_LIST_TASKS)
async def cb_list_tasks(cq: CallbackQuery):
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        rows = await fetchall(
            db,
            """SELECT t.*, c.name AS class_name, c.timezone
               FROM tasks t JOIN classes c ON c.id=t.class_id
               ORDER BY due_utc ASC"""
        )
    if not rows:
        text = "üìã –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        lines = ["<b>üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π</b>"]
        for r in rows:
            tz = ZoneInfo(r["timezone"])
            due_local_str = fmt_dt_local(datetime.fromisoformat(r["due_utc"]).replace(tzinfo=timezone.utc), tz)
            lines.append(f"#{r['id']} ‚Ä¢ {r['class_name']} ‚Ä¢ <b>{r['title']}</b> ‚Äî {due_local_str} {tz.key}")
        text = "\n".join(lines)
    await cq.message.edit_text(text, reply_markup=back_kb())

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ =====
@router.callback_query(F.data == CB_GEN)
async def cb_gen(cq: CallbackQuery):
    USER_STATE[cq.from_user.id] = {"mode": "gen", "step": 0, "data": {}, "chat_id": cq.message.chat.id}
    await cq.message.edit_text(
        "ü§ñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è MicroPython</b>\n\n"
        "–®–∞–≥ 1/1: –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–∏–º–µ—Ä:\n"
        "<i>–ö–Ω–æ–ø–∫–∞ –Ω–∞ GPIO12 –≤–∫–ª—é—á–∞–µ—Ç LED –Ω–∞ GPIO2 –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã, PWM 50%</i>\n",
        reply_markup=back_kb()
    )

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (FSM) =====
@router.message(F.text)
async def on_text(msg: Message):
    state = USER_STATE.get(msg.from_user.id)
    if not state:
        return await show_main_menu(msg)

    mode = state["mode"]
    step = state.get("step", 0)
    data = state.setdefault("data", {})

    # ---------- ADD CLASS ----------
    if mode == "add_class":
        name = msg.text.strip()
        tz_key = DEFAULT_TZ
        async with aiosqlite.connect(DB_PATH) as db:
            try:
                await db.execute(
                    "INSERT INTO classes(name, owner_chat_id, timezone) VALUES (?, ?, ?)",
                    (name, msg.chat.id, tz_key)
                )
                await db.commit()
            except Exception as e:
                await msg.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞: {e}", reply_markup=back_kb())
                return
        USER_STATE.pop(msg.from_user.id, None)
        await msg.answer(f"‚úÖ –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω: <b>{name}</b> (TZ={tz_key})", reply_markup=back_kb())
        return

    # ---------- ADD STUDENT (—Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ) ----------
    if mode == "add_student":
        if step == 0:
            data["name"] = msg.text.strip()
            state["step"] = 1
            return await msg.answer("–®–∞–≥ 2/2: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª).",
                                    reply_markup=back_kb())
        elif step == 1:
            username = msg.text.strip()
            if username == "-":
                username = None
            else:
                username = username.lstrip("@") if username else None
            async with aiosqlite.connect(DB_PATH) as db:
                db.row_factory = aiosqlite.Row  # dict-like —Å—Ç—Ä–æ–∫–∏
                try:
                    await db.execute(
                        "INSERT INTO students(name, username) VALUES (?, ?) "
                        "ON CONFLICT(name) DO UPDATE SET username=excluded.username",
                        (data["name"], username)
                    )
                    await db.commit()
                    row = await fetchone(db, "SELECT id, name, username FROM students WHERE name=?", (data["name"],))
                    student_id = row["id"]
                except Exception as e:
                    await msg.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=back_kb())
                    return

                classes = await fetchall(db, "SELECT id, name FROM classes ORDER BY name COLLATE NOCASE ASC")

            if not classes:
                USER_STATE.pop(msg.from_user.id, None)
                return await msg.answer(
                    f"‚úÖ –£—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω: <b>{data['name']}</b> (@{username or '‚Äî'})\n\n"
                    f"–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤ ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –∏ –∑–∞–ø–∏—à–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –ø–æ–∑–∂–µ.",
                    reply_markup=back_kb()
                )

            USER_STATE.pop(msg.from_user.id, None)
            rows = [(c["name"], f"{CB_ENROLL_PICK_CLS}{student_id}:{c['id']}") for c in classes]
            rows.append(("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", CB_STU_AFTER_ADD_SKIP))
            return await msg.answer(
                f"‚úÖ –£—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω: <b>{data['name']}</b> (@{username or '‚Äî'})\n\n"
                f"–°—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–ª–∞—Å—Å?",
                reply_markup=single_col_kb(rows)
            )

    # ---------- REGISTER ----------
    if mode == "register":
        student_name = msg.text.strip()
        async with aiosqlite.connect(DB_PATH) as db:
            cur = await db.execute("UPDATE students SET chat_id=? WHERE name=?", (msg.chat.id, student_name))
            await db.commit()
            if cur.rowcount == 0:
                return await msg.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ.", reply_markup=back_kb())
        USER_STATE.pop(msg.from_user.id, None)
        await msg.answer(f"‚úÖ –ß–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–Ω–∏–∫—É: <b>{student_name}</b>", reply_markup=back_kb())
        return

    # ---------- ADD TASK (—Ç–µ–ø–µ—Ä—å —à–∞–≥–∏ 1..3, –∫–ª–∞—Å—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –∫–Ω–æ–ø–∫–æ–π) ----------
    if mode == "add_task":
        # step 1: title
        if step == 1:
            data["title"] = msg.text.strip()
            state["step"] = 2
            return await msg.answer(
                "–®–∞–≥ 3/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–µ–¥–ª–∞–π–Ω –≤ UTC</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>YYYY-MM-DD HH:MM</code>.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>2025-09-25 18:00</code>",
                reply_markup=back_kb()
            )
        # step 2: deadline
        elif step == 2:
            due_str = msg.text.strip()
            try:
                due_utc = datetime.strptime(due_str, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
            except Exception:
                return await msg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM (UTC).",
                                        reply_markup=back_kb())
            data["due_utc"] = due_utc
            state["step"] = 3
            return await msg.answer("–®–∞–≥ 4/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> (–∏–ª–∏ ¬´-¬ª).", reply_markup=back_kb())
        # step 3: description -> save
        elif step == 3:
            description = msg.text.strip()
            if description == "-":
                description = ""
            async with aiosqlite.connect(DB_PATH) as db:
                db.row_factory = aiosqlite.Row
                class_row = await fetchone(db, "SELECT * FROM classes WHERE id=?", (data["class_id"],))
                if not class_row:
                    return await msg.answer("–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª —É–¥–∞–ª—ë–Ω).", reply_markup=back_kb())
                tz = ZoneInfo(class_row["timezone"])
                await db.execute(
                    "INSERT INTO tasks(class_id, title, description, due_utc, created_utc) VALUES(?, ?, ?, ?, ?)",
                    (
                        class_row["id"], data["title"], description,
                        data["due_utc"].astimezone(timezone.utc).isoformat(),
                        datetime.now(timezone.utc).isoformat()
                    )
                )
                await db.commit()
                row = await fetchone(db, "SELECT last_insert_rowid() AS id")
                task_id = row["id"]
            await schedule_task_jobs(task_id)
            due_local_str = fmt_dt_local(data["due_utc"], tz)
            USER_STATE.pop(msg.from_user.id, None)
            return await msg.answer(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: <b>{data['title']}</b>\n"
                f"–ö–ª–∞—Å—Å: <b>{class_row['name']}</b>\n"
                f"–î–µ–¥–ª–∞–π–Ω: <b>{due_local_str} {tz.key}</b>\nID: <code>{task_id}</code>",
                reply_markup=back_kb()
            )
        else:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –¥–æ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
            return await msg.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=back_kb())

    # # ---------- GEN ----------
    # if mode == "gen":
    #     desc = msg.text.strip()
    #     if not desc:
    #         return await msg.answer("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=back_kb())
    #     model_name = USER_MODEL.get(msg.from_user.id, DEFAULT_MODEL)
    #     llm = build_llm(model_name)
    #     chain = PROMPT | llm | parser
    #     await msg.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5‚Äì15 —Å–µ–∫—É–Ω–¥...", reply_markup=back_kb())
    #     try:
    #         result = await chain.ainvoke({"task_description": desc})
    #     except Exception as e:
    #         return await msg.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}", reply_markup=back_kb())
    #     code = extract_code_from_markdown(result)
    #     bio = BytesIO()
    #     bio.write(code.encode("utf-8"))
    #     bio.seek(0)
    #     file = BufferedInputFile(bio.read(), filename="micropython_task.py")
    #     await msg.answer_document(file, caption="–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.", reply_markup=back_kb())
    #     if len(result) < 3500:
    #         await msg.answer(result, reply_markup=back_kb())
    #     USER_STATE.pop(msg.from_user.id, None)
    #     return

    # –§–æ–ª–±—ç–∫
    USER_STATE.pop(msg.from_user.id, None)
    await show_main_menu(msg)

# ======= –ö–æ–ª–ª–±—ç–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞: –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å/—Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤ =======
@router.callback_query(F.data == CB_STU_AFTER_ADD_SKIP)
async def cb_stu_after_add_skip(cq: CallbackQuery):
    await cq.message.edit_text("–û–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=back_kb())

@router.callback_query(F.data.startswith(CB_STU_AFTER_ADD_ENROLL))
async def cb_stu_after_add_enroll(cq: CallbackQuery):
    # –≠—Ç–æ—Ç –ø—É—Ç—å –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤—ã–∑–æ–≤–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π ¬´–ó–∞—á–∏—Å–ª–∏—Ç—å —Å–µ–π—á–∞—Å¬ª
    try:
        student_id = int(cq.data.split(":")[1])
    except Exception:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        s = await fetchone(db, "SELECT name, username FROM students WHERE id=?", (student_id,))
        classes = await fetchall(db, "SELECT id, name FROM classes ORDER BY name COLLATE NOCASE ASC")
    if not s:
        return await cq.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    if not classes:
        return await cq.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å.", reply_markup=back_kb())
    rows = [(c["name"], f"{CB_ENROLL_PICK_CLS}{student_id}:{c['id']}") for c in classes]
    rows.append(("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", CB_STU_AFTER_ADD_SKIP))
    await cq.message.edit_text(
        f"üîó –£—á–µ–Ω–∏–∫: <b>{display_student(s['name'], s['username'])}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–ª–∞—Å—Å</b>:",
        reply_markup=single_col_kb(rows)
    )


# -------------------- MAIN --------------------

async def main():
    global BOT, SCHEDULER
    await ensure_db()

    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

    BOT = Bot(token=token, default=default_props)
    dp = Dispatcher()
    dp.include_router(router)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    SCHEDULER = AsyncIOScheduler(timezone=pytz.utc)
    SCHEDULER.start()

    # –ü–æ–¥–Ω—è—Ç—å –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await rehydrate_jobs()

    print("Bot is running. Press Ctrl+C to stop.")
    await dp.start_polling(BOT)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Stopped.")
