from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from zoneinfo import ZoneInfo

from utils import ensure_authorized, is_global_admin
from keyboards import ga_panel_kb, ga_core_kb, ga_more_kb, ga_info_kb, back_kb
from callbacks import (
    CB_GA_MENU, CB_GA_SEC_CORE, CB_GA_SEC_MORE, CB_GA_SEC_INFO,
    CB_GA_ADD_SCHOOL, CB_GA_EDIT_SCHOOLS, CB_GA_ASSIGN_LA, CB_GA_EDIT_LA,
    CB_GA_ASSIGN_TEACHER, CB_GA_ASSIGN_STUDENT, CB_GA_EDIT_TEACHERS, CB_GA_EDIT_STUDENTS,
    CB_GA_LIST_SCHOOLS, CB_GA_LIST_LA, CB_GA_LIST_TEACHERS, CB_GA_LIST_STUDENTS, CB_GA_LIST_GA,
)
from callbacks import (
    CB_GA_EDIT_SCHOOLS, CB_GA_ED_S_PICK,
    CB_GA_ED_S_NAME, CB_GA_ED_S_SHORT, CB_GA_ED_S_ADDR, CB_GA_ED_S_TZ
)
from keyboards import single_col_kb, ga_edit_school_detail_kb
from db import list_schools, get_school_by_id, update_school_field

from db import create_school

router = Router()

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –£–ó (–≤ –ø–∞–º—è—Ç–∏)
# GA_STATE[user_id] = {"mode": "ga_add_school", "step": 0..3, "data": {...}}
GA_STATE: dict[int, dict] = {}

# --- –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å —Ä–∞–∑–¥–µ–ª–æ–≤ ---
@router.callback_query(F.data == CB_GA_MENU)
async def cb_ga_menu(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq):
        return
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

    text = (
        "üìä <b>–ü–∞–Ω–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
        "‚Ä¢ üß± <b>–û—Å–Ω–æ–≤–Ω—ã–µ</b> ‚Äî –£–ó –∏ –õ–ê\n"
        "‚Ä¢ üß© <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ</b> ‚Äî —É—á–∏—Ç–µ–ª—è –∏ —É—á–µ–Ω–∏–∫–∏\n"
        "‚Ä¢ üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ</b> ‚Äî —Å–ø–∏—Å–∫–∏ –∏ —Å–ø—Ä–∞–≤–∫–∏"
    )
    await cq.message.edit_text(text, reply_markup=ga_panel_kb())

# --- –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ ---
@router.callback_query(F.data == CB_GA_SEC_CORE)
async def cb_ga_core(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    await cq.message.edit_text("üß± <b>–û—Å–Ω–æ–≤–Ω—ã–µ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ga_core_kb())

@router.callback_query(F.data == CB_GA_SEC_MORE)
async def cb_ga_more(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    await cq.message.edit_text("üß© <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ga_more_kb())

@router.callback_query(F.data == CB_GA_SEC_INFO)
async def cb_ga_info(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    await cq.message.edit_text("üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ</b>\n–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=ga_info_kb())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –£–ó: –∑–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ ---
@router.callback_query(F.data == CB_GA_ADD_SCHOOL)
async def ga_add_school(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq):
        return
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

    GA_STATE[cq.from_user.id] = {"mode": "ga_add_school", "step": 0, "data": {}}
    await cq.message.edit_text(
        "üè´ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è</b>\n\n"
        "–®–∞–≥ 1/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> –£–ó.\n",
        reply_markup=back_kb()
    )

# --- –ó–∞–≥–ª—É—à–∫–∏ –¥—Ä—É–≥–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏) ---
@router.callback_query(F.data == CB_GA_EDIT_SCHOOLS)
async def ga_edit_schools(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –£–ó ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_ASSIGN_LA)
async def ga_assign_la(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –õ–ê ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_EDIT_LA)
async def ga_edit_la(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–ê ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_ASSIGN_TEACHER)
async def ga_assign_teacher(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–∏—Ç–µ–ª—è ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_ASSIGN_STUDENT)
async def ga_assign_student(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_EDIT_TEACHERS)
async def ga_edit_teachers(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_EDIT_STUDENTS)
async def ga_edit_students(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_SCHOOLS)
async def ga_list_schools(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–°–ø–∏—Å–æ–∫ –£–ó ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_LA)
async def ga_list_la(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–°–ø–∏—Å–æ–∫ –õ–ê ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_TEACHERS)
async def ga_list_teachers(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_STUDENTS)
async def ga_list_students(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_GA)
async def ga_list_ga(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id): return
    await cq.answer("–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ "–î–æ–±–∞–≤–∏—Ç—å –£–ó" ---
@router.message(F.text)
async def ga_add_school_steps(msg: Message):
    st = GA_STATE.get(msg.from_user.id)
    if not st or st.get("mode") != "ga_add_school":
        # –Ω–µ –Ω–∞—à –º–∞—Å—Ç–µ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    # (–µ—Å–ª–∏ –∑–∞ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    from utils import ensure_authorized as _ensure, is_global_admin as _is_ga
    if not await _ensure(msg.from_user.id, msg) or not await _is_ga(msg.from_user.id):
        GA_STATE.pop(msg.from_user.id, None)
        return

    step = st.get("step", 0)
    data = st.setdefault("data", {})

    if step == 0:
        data["name"] = msg.text.strip()
        st["step"] = 1
        return await msg.answer(
            "–®–∞–≥ 2/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –∏–º—è</b> –£–ó (–∏–ª–∏ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).",
            reply_markup=back_kb()
        )

    if step == 1:
        short = msg.text.strip()
        data["short_name"] = None if short == "-" else short
        st["step"] = 2
        return await msg.answer(
            "–®–∞–≥ 3/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –£–ó (–∏–ª–∏ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).",
            reply_markup=back_kb()
        )

    if step == 2:
        addr = msg.text.strip()
        data["address"] = None if addr == "-" else addr
        st["step"] = 3
        return await msg.answer(
            "–®–∞–≥ 4/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>IANA —Ç–∞–π–º–∑–æ–Ω—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>Europe/Moscow</code>)\n"
            "–∏–ª–∏ ¬´-¬ª –¥–ª—è <b>UTC</b>.",
            reply_markup=back_kb()
        )

    if step == 3:
        tz_in = msg.text.strip()
        tz = "UTC" if tz_in == "-" else tz_in
        # –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–π–º–∑–æ–Ω—ã (–º—è–≥–∫–∞—è)
        try:
            _ = ZoneInfo(tz)
        except Exception:
            tz = "UTC"

        # –∑–∞–ø–∏—Å—å –≤ –ë–î
        try:
            school_id = await create_school(
                name=data["name"],
                short_name=data.get("short_name"),
                address=data.get("address"),
                tz=tz
            )
        except Exception as e:
            GA_STATE.pop(msg.from_user.id, None)
            return await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –£–ó: {e}", reply_markup=ga_core_kb())

        GA_STATE.pop(msg.from_user.id, None)
        text = (
            "‚úÖ <b>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ</b>\n\n"
            f"ID: <code>{school_id}</code>\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data['name']}</b>\n"
            f"–ö—Ä–∞—Ç–∫–æ–µ –∏–º—è: <b>{data.get('short_name') or '‚Äî'}</b>\n"
            f"–ê–¥—Ä–µ—Å: <b>{data.get('address') or '‚Äî'}</b>\n"
            f"–¢–∞–π–º–∑–æ–Ω–∞: <b>{tz}</b>\n\n"
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        )
        return await msg.answer(text, reply_markup=ga_core_kb())

def _format_school_card(s: dict) -> str:
    return (
        "üè´ <b>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ</b>\n\n"
        f"ID: <code>{s['id']}</code>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{s['name']}</b>\n"
        f"–ö—Ä–∞—Ç–∫–æ–µ –∏–º—è: <b>{s.get('short_name') or '‚Äî'}</b>\n"
        f"–ê–¥—Ä–µ—Å: <b>{s.get('address') or '‚Äî'}</b>\n"
        f"–¢–∞–π–º–∑–æ–Ω–∞: <code>{s.get('timezone') or 'UTC'}</code>"
    )

@router.callback_query(F.data == CB_GA_EDIT_SCHOOLS)
async def ga_edit_schools(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    schools = await list_schools()
    if not schools:
        return await cq.message.edit_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π.\n–°–æ–∑–¥–∞–π—Ç–µ –æ–¥–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û—Å–Ω–æ–≤–Ω—ã–µ¬ª.",
            reply_markup=ga_core_kb()
        )
    rows = [(f"{s['name']}", f"{CB_GA_ED_S_PICK}{s['id']}") for s in schools]
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –£–ó –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=single_col_kb(rows))

@router.callback_query(F.data.startswith(CB_GA_ED_S_PICK))
async def ga_es_pick(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

    try:
        school_id = int(cq.data.split(":", 1)[1])
    except Exception:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    s = await get_school_by_id(school_id)
    if not s:
        return await cq.answer("–£–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–æ).", show_alert=True)

    await cq.message.edit_text(_format_school_card(s), reply_markup=ga_edit_school_detail_kb(school_id))

def _start_edit_field(user_id: int, school_id: int, field: str, prompt: str):
    GA_STATE[user_id] = {"mode": "ga_edit_school", "school_id": school_id, "field": field}
    return prompt

@router.callback_query(F.data.startswith(CB_GA_ED_S_NAME))
async def ga_es_name(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "name", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –£–ó:")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))

@router.callback_query(F.data.startswith(CB_GA_ED_S_SHORT))
async def ga_es_short(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "short_name",
                            "–í–≤–µ–¥–∏—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –∏–º—è</b> –£–ó (–∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å):")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))

@router.callback_query(F.data.startswith(CB_GA_ED_S_ADDR))
async def ga_es_addr(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "address",
                            "–í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –£–ó (–∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å):")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))

@router.callback_query(F.data.startswith(CB_GA_ED_S_TZ))
async def ga_es_tz(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "timezone",
                            "–í–≤–µ–¥–∏—Ç–µ <b>IANA —Ç–∞–π–º–∑–æ–Ω—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>Europe/Moscow</code>)\n"
                            "–ò–ª–∏ ¬´-¬ª –¥–ª—è <code>UTC</code>.")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))

from zoneinfo import ZoneInfo

@router.message(F.text)
async def ga_edit_school_text(msg: Message):
    st = GA_STATE.get(msg.from_user.id)
    if not st or st.get("mode") != "ga_edit_school":
        return  # –Ω–µ –Ω–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π

    if not await ensure_authorized(msg.from_user.id, msg) or not await is_global_admin(msg.from_user.id):
        GA_STATE.pop(msg.from_user.id, None)
        return

    school_id = st["school_id"]
    field = st["field"]
    raw = msg.text.strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    value = raw
    if field in ("short_name", "address") and raw == "-":
        value = None
    if field == "timezone":
        value = "UTC" if raw == "-" else raw
        try:
            _ = ZoneInfo(value)
        except Exception:
            return await msg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: <code>Europe/Moscow</code> –∏–ª–∏ ¬´-¬ª.")
    if field == "name" and len(raw) < 2:
        return await msg.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    try:
        await update_school_field(school_id, field, value)
    except Exception as e:
        GA_STATE.pop(msg.from_user.id, None)
        return await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    s = await get_school_by_id(school_id)
    GA_STATE.pop(msg.from_user.id, None)
    if not s:
        return await msg.answer("‚ö†Ô∏è –£–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–æ?)")
    await msg.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await msg.answer(_format_school_card(s), reply_markup=ga_edit_school_detail_kb(school_id))
