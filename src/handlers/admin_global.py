from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from zoneinfo import ZoneInfo

from utils import ensure_authorized, is_global_admin
from keyboards import (
    ga_panel_kb, ga_core_kb, ga_more_kb, ga_info_kb, back_kb,
    single_col_kb, ga_edit_school_detail_kb, InlineKeyboardMarkup, InlineKeyboardButton
)
from callbacks import (
    CB_GA_MENU, CB_GA_SEC_CORE, CB_GA_SEC_MORE, CB_GA_SEC_INFO,
    CB_GA_ADD_SCHOOL, CB_GA_EDIT_SCHOOLS, CB_GA_ASSIGN_LA, CB_GA_EDIT_LA,
    CB_GA_ASSIGN_TEACHER, CB_GA_ASSIGN_STUDENT, CB_GA_EDIT_TEACHERS, CB_GA_EDIT_STUDENTS,
    CB_GA_LIST_SCHOOLS, CB_GA_LIST_LA, CB_GA_LIST_TEACHERS, CB_GA_LIST_STUDENTS, CB_GA_LIST_GA,
    CB_GA_ED_S_PICK, CB_GA_ED_S_NAME, CB_GA_ED_S_SHORT, CB_GA_ED_S_ADDR, CB_GA_ED_S_TZ,
    CB_GA_BACK_TO_CORE
)
from db import (
    list_schools, get_school_by_id, update_school_field, create_school,
    create_pending_la, consume_pending_la, get_school_by_id
)


router = Router()

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ FSM –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
GA_STATE: dict[int, dict] = {}

# FSM –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –õ–ê ‚Äî —Ç–µ–ø–µ—Ä—å –∑–¥–µ—Å—å
COMMON_STATE: dict[int, dict] = {}


def _cancel_kb():
    from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_activation")]
    ])


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –û—Å–Ω–æ–≤–Ω—ã–µ" ---
def back_to_core_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ ¬´–û—Å–Ω–æ–≤–Ω—ã–µ¬ª", callback_data=CB_GA_BACK_TO_CORE)]
    ])


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –û—Å–Ω–æ–≤–Ω—ã–µ" ---
@router.callback_query(F.data == CB_GA_BACK_TO_CORE)
async def cb_back_to_core(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cb_ga_core(cq)


# --- –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å —Ä–∞–∑–¥–µ–ª–æ–≤ ---
@router.callback_query(F.data == CB_GA_MENU)
async def cb_ga_menu(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq):
        return
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

    text = (
        "üìä <b>–ü–∞–Ω–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
        "‚Ä¢ üß± <b>–û—Å–Ω–æ–≤–Ω—ã–µ</b> ‚Äî –£–ó –∏ –õ–ê\n"
        "‚Ä¢ üß© <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ</b> ‚Äî —É—á–∏—Ç–µ–ª—è –∏ —É—á–µ–Ω–∏–∫–∏\n"
        "‚Ä¢ üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ</b> ‚Äî —Å–ø–∏—Å–∫–∏ –∏ —Å–ø—Ä–∞–≤–∫–∏"
    )
    await cq.message.edit_text(text, reply_markup=ga_panel_kb())


# --- –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ ---
@router.callback_query(F.data == CB_GA_SEC_CORE)
async def cb_ga_core(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    await cq.message.edit_text("üß± <b>–û—Å–Ω–æ–≤–Ω—ã–µ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ga_core_kb())


@router.callback_query(F.data == CB_GA_SEC_MORE)
async def cb_ga_more(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    await cq.message.edit_text("üß© <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ga_more_kb())


@router.callback_query(F.data == CB_GA_SEC_INFO)
async def cb_ga_info(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    await cq.message.edit_text("üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ</b>\n–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=ga_info_kb())


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –£–ó: –∑–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ ---
@router.callback_query(F.data == CB_GA_ADD_SCHOOL)
async def ga_add_school(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq):
        return
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

    GA_STATE[cq.from_user.id] = {"mode": "ga_add_school", "step": 0, "data": {}}
    await cq.message.edit_text(
        "üè´ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è</b>\n\n"
        "–®–∞–≥ 1/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> –£–ó.\n",
        reply_markup=back_kb()
    )


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –£–ó: –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ ---
@router.callback_query(F.data == CB_GA_EDIT_SCHOOLS)
async def ga_edit_schools(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return
    schools = await list_schools()
    if not schools:
        return await cq.message.edit_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π.\n–°–æ–∑–¥–∞–π—Ç–µ –æ–¥–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û—Å–Ω–æ–≤–Ω—ã–µ¬ª.",
            reply_markup=ga_core_kb()
        )
    rows = [(f"{s['name']}", f"{CB_GA_ED_S_PICK}{s['id']}") for s in schools]
    rows.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ ¬´–û—Å–Ω–æ–≤–Ω—ã–µ¬ª", CB_GA_BACK_TO_CORE))
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –£–ó –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=single_col_kb(rows))


@router.callback_query(F.data.startswith(CB_GA_ED_S_PICK))
async def ga_es_pick(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

    try:
        school_id = int(cq.data.split(":", 1)[1])
    except Exception:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    s = await get_school_by_id(school_id)
    if not s:
        return await cq.answer("–£–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–æ).", show_alert=True)

    await cq.message.edit_text(_format_school_card(s), reply_markup=ga_edit_school_detail_kb(school_id))


def _format_school_card(s: dict) -> str:
    return (
        "üè´ <b>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ</b>\n\n"
        f"ID: <code>{s['id']}</code>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{s['name']}</b>\n"
        f"–ö—Ä–∞—Ç–∫–æ–µ –∏–º—è: <b>{s.get('short_name') or '‚Äî'}</b>\n"
        f"–ê–¥—Ä–µ—Å: <b>{s.get('address') or '‚Äî'}</b>\n"
        f"–¢–∞–π–º–∑–æ–Ω–∞: <code>{s.get('timezone') or 'UTC'}</code>"
    )


def _start_edit_field(user_id: int, school_id: int, field: str, prompt: str):
    GA_STATE[user_id] = {"mode": "ga_edit_school", "school_id": school_id, "field": field}
    return prompt


@router.callback_query(F.data.startswith(CB_GA_ED_S_NAME))
async def ga_es_name(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "name", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –£–ó:")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))


@router.callback_query(F.data.startswith(CB_GA_ED_S_SHORT))
async def ga_es_short(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "short_name",
                            "–í–≤–µ–¥–∏—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –∏–º—è</b> –£–ó (–∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å):")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))


@router.callback_query(F.data.startswith(CB_GA_ED_S_ADDR))
async def ga_es_addr(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "address",
                            "–í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –£–ó (–∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å):")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))


@router.callback_query(F.data.startswith(CB_GA_ED_S_TZ))
async def ga_es_tz(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    sid = int(cq.data.split(":", 1)[1])
    txt = _start_edit_field(cq.from_user.id, sid, "timezone",
                            "–í–≤–µ–¥–∏—Ç–µ <b>IANA —Ç–∞–π–ºzon—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>Europe/Moscow</code>)\n"
                            "–ò–ª–∏ ¬´-¬ª –¥–ª—è <code>UTC</code>.")
    await cq.message.edit_text(txt, reply_markup=ga_edit_school_detail_kb(sid))


# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–µ—Ä–µ–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ) ---
@router.callback_query(F.data == CB_GA_ASSIGN_LA)
async def ga_assign_la_start(cq: CallbackQuery):
    if not await ensure_authorized(cq.from_user.id, cq) or not await is_global_admin(cq.from_user.id):
        return

    schools = await list_schools()
    if not schools:
        return await cq.message.edit_text(
            "‚ùå –ù–µ—Ç —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ.",
            reply_markup=ga_core_kb()
        )

    rows = [(f"{s['name']}", f"ga_assign_la_pick:{s['id']}") for s in schools]
    rows.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ ¬´–û—Å–Ω–æ–≤–Ω—ã–µ¬ª", CB_GA_BACK_TO_CORE))
    await cq.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –õ–ê:",
        reply_markup=single_col_kb(rows)
    )


@router.callback_query(F.data.startswith("ga_assign_la_pick:"))
async def ga_assign_la_pick_school(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)

    try:
        school_id = int(cq.data.split(":", 1)[1])
    except ValueError:
        return await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —à–∫–æ–ª—ã", show_alert=True)

    school = await get_school_by_id(school_id)
    if not school:
        return await cq.answer("–£–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

    GA_STATE[cq.from_user.id] = {
        "mode": "ga_assign_la_invite",
        "school_id": school_id,
        "school_name": school["name"]
    }

    await cq.message.edit_text(
        f"üì¨ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –õ–ê –≤ <b>{school['name']}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>Telegram ID</b> –±—É–¥—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
        reply_markup=back_to_core_kb()
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ FSM) ---
@router.message(F.text)
async def handle_ga_text_input(msg: Message):
    user_id = msg.from_user.id

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º FSM –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –õ–ê (COMMON_STATE)
    st_common = COMMON_STATE.get(user_id)
    if st_common and st_common.get("mode") == "await_la_password":
        await _handle_la_password_input(msg, st_common)
        return

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º FSM –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ (GA_STATE)
    st = GA_STATE.get(user_id)
    if not st:
        return

    mode = st.get("mode")

    if not await ensure_authorized(user_id, msg) or not await is_global_admin(user_id):
        GA_STATE.pop(user_id, None)
        return

    if mode == "ga_add_school":
        await _handle_ga_add_school_step(msg, st)
    elif mode == "ga_edit_school":
        await _handle_ga_edit_school_step(msg, st)
    elif mode == "ga_assign_la_invite":
        await _handle_la_invite_step(msg, st)
    else:
        GA_STATE.pop(user_id, None)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –õ–ê ---
async def _handle_la_password_input(msg: Message, st: dict):
    password = msg.text.strip()
    user_id = msg.from_user.id

    school_id = await consume_pending_la(user_id, password)
    COMMON_STATE.pop(user_id, None)

    if school_id is not None:
        school = await get_school_by_id(school_id)
        school_name = school["name"] if school else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ"
        await msg.answer(
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–æ–ª—å <b>–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>.\n"
            f"üè´ –£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: <b>{school_name}</b>"
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤ common.py)
        from handlers.common import _show_main_for
        await _show_main_for(user_id, msg)
    else:
        await msg.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=_cancel_kb()
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –õ–ê ---
async def _handle_la_invite_step(msg: Message, st: dict):
    user_id = msg.from_user.id
    school_id = st["school_id"]
    school_name = st["school_name"]
    raw = msg.text.strip()

    if not raw.isdigit():
        return await msg.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.",
            reply_markup=back_to_core_kb()
        )

    target_user_id = int(raw)

    try:
        password = await create_pending_la(target_user_id, school_id)
    except Exception as e:
        GA_STATE.pop(user_id, None)
        return await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}", reply_markup=ga_core_kb())

    bot_info = await msg.bot.get_me()
    bot_username = bot_info.username

    if not bot_username:
        GA_STATE.pop(user_id, None)
        return await msg.answer(
            "‚ùå –£ –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=ga_core_kb()
        )

    invite_link = f"https://t.me/{bot_username}?start={target_user_id}"

    GA_STATE.pop(user_id, None)

    await msg.answer(
        f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –õ–ê —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üë§ <b>Telegram ID:</b> <code>{target_user_id}</code>\n"
        f"üè´ <b>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:</b> {school_name}\n\n"
        f"üîë <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {invite_link}\n\n"
        f"‚ÑπÔ∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É</b> –∏ <b>–ø–∞—Ä–æ–ª—å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        f"–¢–æ–ª—å–∫–æ –æ–Ω —Å–º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
        reply_markup=ga_core_kb(),
        disable_web_page_preview=True
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –£–ó ---
async def _handle_ga_add_school_step(msg: Message, st: dict):
    step = st.get("step", 0)
    data = st.setdefault("data", {})
    user_id = msg.from_user.id

    if step == 0:
        data["name"] = msg.text.strip()
        st["step"] = 1
        return await msg.answer(
            "–®–∞–≥ 2/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –∏–º—è</b> –£–ó (–∏–ª–∏ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).",
            reply_markup=back_kb()
        )

    if step == 1:
        short = msg.text.strip()
        data["short_name"] = None if short == "-" else short
        st["step"] = 2
        return await msg.answer(
            "–®–∞–≥ 3/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –£–ó (–∏–ª–∏ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).",
            reply_markup=back_kb()
        )

    if step == 2:
        addr = msg.text.strip()
        data["address"] = None if addr == "-" else addr
        st["step"] = 3
        return await msg.answer(
            "–®–∞–≥ 4/4: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>IANA —Ç–∞–π–º–∑–æ–Ω—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>Europe/Moscow</code>)\n"
            "–∏–ª–∏ ¬´-¬ª –¥–ª—è <b>UTC</b>.",
            reply_markup=back_kb()
        )

    if step == 3:
        tz_in = msg.text.strip()
        tz = "UTC" if tz_in == "-" else tz_in
        try:
            _ = ZoneInfo(tz)
        except Exception:
            tz = "UTC"

        try:
            school_id = await create_school(
                name=data["name"],
                short_name=data.get("short_name"),
                address=data.get("address"),
                tz=tz
            )
        except Exception as e:
            GA_STATE.pop(user_id, None)
            return await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –£–ó: {e}", reply_markup=ga_core_kb())

        GA_STATE.pop(user_id, None)
        text = (
            "‚úÖ <b>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ</b>\n\n"
            f"ID: <code>{school_id}</code>\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data['name']}</b>\n"
            f"–ö—Ä–∞—Ç–∫–æ–µ –∏–º—è: <b>{data.get('short_name') or '‚Äî'}</b>\n"
            f"–ê–¥—Ä–µ—Å: <b>{data.get('address') or '‚Äî'}</b>\n"
            f"–¢–∞–π–º–∑–æ–Ω–∞: <b>{tz}</b>\n\n"
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        )
        return await msg.answer(text, reply_markup=ga_core_kb())


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –£–ó ---
async def _handle_ga_edit_school_step(msg: Message, st: dict):
    user_id = msg.from_user.id
    school_id = st["school_id"]
    field = st["field"]
    raw = msg.text.strip()

    if field == "name":
        if len(raw) < 2:
            return await msg.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")
        value = raw
    elif field in ("short_name", "address"):
        value = None if raw == "-" else raw
    elif field == "timezone":
        value = "UTC" if raw == "-" else raw
        try:
            _ = ZoneInfo(value)
        except Exception:
            return await msg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: <code>Europe/Moscow</code> –∏–ª–∏ ¬´-¬ª.")
    else:
        GA_STATE.pop(user_id, None)
        return await msg.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    try:
        await update_school_field(school_id, field, value)
    except Exception as e:
        GA_STATE.pop(user_id, None)
        return await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    s = await get_school_by_id(school_id)
    GA_STATE.pop(user_id, None)
    if not s:
        return await msg.answer("‚ö†Ô∏è –£–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–æ?)")

    await msg.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await msg.answer(_format_school_card(s), reply_markup=ga_edit_school_detail_kb(school_id))


# --- –ó–∞–≥–ª—É—à–∫–∏ ---
@router.callback_query(F.data == CB_GA_EDIT_LA)
async def ga_edit_la(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–ê ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_ASSIGN_TEACHER)
async def ga_assign_teacher(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–∏—Ç–µ–ª—è ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_ASSIGN_STUDENT)
async def ga_assign_student(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_EDIT_TEACHERS)
async def ga_edit_teachers(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_EDIT_STUDENTS)
async def ga_edit_students(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_SCHOOLS)
async def ga_list_schools(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–°–ø–∏—Å–æ–∫ –£–ó ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_LA)
async def ga_list_la(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–°–ø–∏—Å–æ–∫ –õ–ê ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_TEACHERS)
async def ga_list_teachers(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_STUDENTS)
async def ga_list_students(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)

@router.callback_query(F.data == CB_GA_LIST_GA)
async def ga_list_ga(cq: CallbackQuery):
    if not await is_global_admin(cq.from_user.id):
        return
    await cq.answer("–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ ‚Äî —Å–∫–æ—Ä–æ ‚ú®", show_alert=True)